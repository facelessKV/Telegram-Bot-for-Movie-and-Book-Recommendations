import logging
import random
import requests
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
API_TOKEN = 'YOUR_TELEGRAM_BOT_TOKEN'

# API –∫–ª—é—á–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
TMDB_API_KEY = 'YOUR_TMDB_API_KEY'  # API –∫–ª—é—á –¥–ª—è The Movie Database
GOOGLE_BOOKS_API_KEY = 'YOUR_GOOGLE_BOOKS_API_KEY'  # API –∫–ª—é—á –¥–ª—è Google Books API

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ö–ª–∞—Å—Å –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState(StatesGroup):
    waiting_for_genre = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞
    waiting_for_content_type = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ñ–∏–ª—å–º/–∫–Ω–∏–≥–∞)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –∂–∞–Ω—Ä–æ–≤ –º–µ–∂–¥—É –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ –∫–æ–¥–∞–º–∏ TMDB
TMDB_GENRE_MAP = {
    '–±–æ–µ–≤–∏–∫': 28,
    '–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è': 12, 
    '–∞–Ω–∏–º–∞—Ü–∏—è': 16,
    '–∫–æ–º–µ–¥–∏—è': 35,
    '–∫—Ä–∏–º–∏–Ω–∞–ª': 80,
    '–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π': 99,
    '–¥—Ä–∞–º–∞': 18,
    '—Å–µ–º–µ–π–Ω—ã–π': 10751,
    '—Ñ—ç–Ω—Ç–µ–∑–∏': 14,
    '–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π': 36,
    '—É–∂–∞—Å—ã': 27,
    '–º—É–∑—ã–∫–∞': 10402,
    '–¥–µ—Ç–µ–∫—Ç–∏–≤': 9648,
    '–º–µ–ª–æ–¥—Ä–∞–º–∞': 10749,
    '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞': 878,
    '—Ç—Ä–∏–ª–ª–µ—Ä': 53,
    '–≤–æ–µ–Ω–Ω—ã–π': 10752,
    '–≤–µ—Å—Ç–µ—Ä–Ω': 37
}

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤ –∏–∑ TMDb API
def get_all_genres():
    # –ü–æ–ª—É—á–∞–µ–º –∂–∞–Ω—Ä—ã —Ñ–∏–ª—å–º–æ–≤ –∏–∑ TMDb
    url = f"https://api.themoviedb.org/3/genre/movie/list?api_key={TMDB_API_KEY}&language=ru"
    response = requests.get(url)
    
    if response.status_code == 200:
        genres = response.json()['genres']
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π –∂–∞–Ω—Ä–æ–≤
        return [genre['name'].lower() for genre in genres]
    else:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤
        return list(TMDB_GENRE_MAP.keys())

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–∞ –ø–æ –∂–∞–Ω—Ä—É
def get_movie_recommendation(genre=None):
    try:
        # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ TMDb
        url = f"https://api.themoviedb.org/3/discover/movie?api_key={TMDB_API_KEY}&language=ru&sort_by=popularity.desc&include_adult=false"
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∂–∞–Ω—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∑–∞–ø—Ä–æ—Å
        if genre and genre in TMDB_GENRE_MAP:
            url += f"&with_genres={TMDB_GENRE_MAP[genre]}"
        
        response = requests.get(url)
        
        if response.status_code == 200:
            movies = response.json()['results']
            if movies:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                movie = random.choice(movies)
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
                movie_id = movie['id']
                details_url = f"https://api.themoviedb.org/3/movie/{movie_id}?api_key={TMDB_API_KEY}&language=ru"
                details_response = requests.get(details_url)
                
                if details_response.status_code == 200:
                    movie_details = details_response.json()
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ
                    genres = ", ".join([g['name'] for g in movie_details.get('genres', [])])
                    
                    return {
                        'type': 'movie',
                        'title': movie['title'],
                        'genre': genres,
                        'description': movie.get('overview', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
                        'rating': movie.get('vote_average', '–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞'),
                        'poster': f"https://image.tmdb.org/t/p/w500{movie.get('poster_path', '')}" if movie.get('poster_path') else None
                    }
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        return None
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–∞: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥–∏ –ø–æ –∂–∞–Ω—Ä—É
def get_book_recommendation(genre=None):
    try:
        # –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Google Books API
        url = f"https://www.googleapis.com/books/v1/volumes?q="
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∂–∞–Ω—Ä, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∑–∞–ø—Ä–æ—Å
        if genre:
            url += f"subject:{genre}&"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        url += f"orderBy=relevance&maxResults=40&langRestrict=ru&key={GOOGLE_BOOKS_API_KEY}"
        
        response = requests.get(url)
        
        if response.status_code == 200:
            books_data = response.json()
            if 'items' in books_data and books_data['items']:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–Ω–∏–≥–∏ —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                valid_books = [book for book in books_data['items'] 
                              if 'volumeInfo' in book 
                              and 'title' in book['volumeInfo']
                              and 'authors' in book['volumeInfo']]
                
                if valid_books:
                    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–Ω–∏–≥—É –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    book = random.choice(valid_books)
                    volume_info = book['volumeInfo']
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–Ω–∏–≥–µ
                    return {
                        'type': 'book',
                        'title': volume_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                        'author': ", ".join(volume_info.get('authors', ['–ê–≤—Ç–æ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'])),
                        'genre': ", ".join(volume_info.get('categories', [genre if genre else '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'])),
                        'description': volume_info.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'),
                        'rating': volume_info.get('averageRating', '–ù–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞'),
                        'thumbnail': volume_info.get('imageLinks', {}).get('thumbnail') if 'imageLinks' in volume_info else None
                    }
        
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        return None
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥–∏: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –∂–∞–Ω—Ä–∞
def get_recommendation(genre=None, content_type=None):
    if content_type == 'movie':
        return get_movie_recommendation(genre)
    elif content_type == 'book':
        return get_book_recommendation(genre)
    else:
        # –ï—Å–ª–∏ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ –º–µ–∂–¥—É —Ñ–∏–ª—å–º–æ–º –∏ –∫–Ω–∏–≥–æ–π
        if random.choice(['movie', 'book']) == 'movie':
            return get_movie_recommendation(genre)
        else:
            return get_book_recommendation(genre)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ñ–∏–ª—å–º—ã –∏ –∫–Ω–∏–≥–∏.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/recommend - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é\n"
        "/genre - –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n"
        "/help - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    """
    await message.answer(
        "üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "1. /recommend - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Ñ–∏–ª—å–º–∞ –∏–ª–∏ –∫–Ω–∏–≥–∏.\n"
        "2. /genre - –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞ –≤—ã –º–æ–∂–µ—Ç–µ "
        "—É–∫–∞–∑–∞—Ç—å, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é —Ñ–∏–ª—å–º–∞ –∏–ª–∏ –∫–Ω–∏–≥–∏.\n"
        "3. /help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.\n\n"
        "–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏! üé¨üìñ"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recommend
@dp.message(Command("recommend"))
async def cmd_recommend(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /recommend. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
    """
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–§–∏–ª—å–º"), KeyboardButton(text="–ö–Ω–∏–≥–∞")],
            [KeyboardButton(text="–õ—é–±–æ–π")]
        ],
        resize_keyboard=True
    )
    
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏?", reply_markup=keyboard)
    await state.set_state(UserState.waiting_for_content_type)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
@dp.message(UserState.waiting_for_content_type)
async def process_content_type(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.
    """
    content_type = message.text.lower()
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∏–¥–µ—Ç –ø–æ–∏—Å–∫
    await message.answer("–ò—â—É –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é... üîç", reply_markup=ReplyKeyboardRemove())
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–∏
    if content_type == "—Ñ–∏–ª—å–º":
        content_type = "movie"
    elif content_type == "–∫–Ω–∏–≥–∞":
        content_type = "book"
    else:
        content_type = None
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    recommendation = get_recommendation(content_type=content_type)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if recommendation:
        if recommendation['type'] == 'movie':
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å–º–∞
            message_text = (
                f"üé¨ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ñ–∏–ª—å–º–∞*\n\n"
                f"*–ù–∞–∑–≤–∞–Ω–∏–µ*: {recommendation['title']}\n"
                f"*–ñ–∞–Ω—Ä*: {recommendation['genre']}\n"
                f"*–û–ø–∏—Å–∞–Ω–∏–µ*: {recommendation['description']}\n"
                f"*–†–µ–π—Ç–∏–Ω–≥*: {recommendation['rating']}/10"
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å—Ç–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            if recommendation.get('poster'):
                try:
                    await bot.send_photo(
                        message.chat.id,
                        recommendation['poster'],
                        caption=message_text,
                        parse_mode="Markdown"
                    )
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await message.answer(message_text, parse_mode="Markdown")
            else:
                await message.answer(message_text, parse_mode="Markdown")
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–Ω–∏–≥–∏
            message_text = (
                f"üìö *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∫–Ω–∏–≥–∏*\n\n"
                f"*–ù–∞–∑–≤–∞–Ω–∏–µ*: {recommendation['title']}\n"
                f"*–ê–≤—Ç–æ—Ä*: {recommendation['author']}\n"
                f"*–ñ–∞–Ω—Ä*: {recommendation['genre']}\n"
                f"*–û–ø–∏—Å–∞–Ω–∏–µ*: {recommendation['description']}\n"
                f"*–†–µ–π—Ç–∏–Ω–≥*: {recommendation['rating']}/10"
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–ª–æ–∂–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            if recommendation.get('thumbnail'):
                try:
                    await bot.send_photo(
                        message.chat.id,
                        recommendation['thumbnail'],
                        caption=message_text,
                        parse_mode="Markdown"
                    )
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await message.answer(message_text, parse_mode="Markdown")
            else:
                await message.answer(message_text, parse_mode="Markdown")
    else:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä –∏–ª–∏ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞."
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /genre
@dp.message(Command("genre"))
async def cmd_genre(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /genre. –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∂–∞–Ω—Ä–∞–º–∏.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∂–∞–Ω—Ä–æ–≤
    genres = get_all_genres()
    
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –µ–≥–æ
    if len(genres) > 15:
        genres = genres[:15]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∂–∞–Ω—Ä–∞–º–∏
    keyboard = []
    row = []
    for i, genre in enumerate(genres):
        row.append(KeyboardButton(text=genre.capitalize()))
        if len(row) == 2 or i == len(genres) - 1:
            keyboard.append(row)
            row = []
    
    markup = ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=markup)
    await state.set_state(UserState.waiting_for_genre)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞
@dp.message(UserState.waiting_for_genre)
async def process_genre(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞. –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∂–∞–Ω—Ä –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
    """
    genre = message.text.lower()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∂–∞–Ω—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(genre=genre)
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–§–∏–ª—å–º"), KeyboardButton(text="–ö–Ω–∏–≥–∞")],
            [KeyboardButton(text="–õ—é–±–æ–π")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(f"–í—ã–±—Ä–∞–Ω –∂–∞–Ω—Ä: {genre}. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏?", reply_markup=keyboard)
    await state.set_state(UserState.waiting_for_content_type)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞
@dp.message(UserState.waiting_for_content_type)
async def process_content_type_with_genre(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞. 
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∂–∞–Ω—Ä–∞ –∏ —Ç–∏–ø–∞.
    """
    content_type = message.text.lower()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∂–∞–Ω—Ä
    data = await state.get_data()
    genre = data.get('genre')
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∏–¥–µ—Ç –ø–æ–∏—Å–∫
    await message.answer(f"–ò—â—É {content_type.lower()} –≤ –∂–∞–Ω—Ä–µ {genre}... üîç", reply_markup=ReplyKeyboardRemove())
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä—É—Å—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–∏
    if content_type == "—Ñ–∏–ª—å–º":
        content_type = "movie"
    elif content_type == "–∫–Ω–∏–≥–∞":
        content_type = "book"
    else:
        content_type = None
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    recommendation = get_recommendation(genre=genre, content_type=content_type)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if recommendation:
        if recommendation['type'] == 'movie':
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å–º–∞
            message_text = (
                f"üé¨ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Ñ–∏–ª—å–º–∞*\n\n"
                f"*–ù–∞–∑–≤–∞–Ω–∏–µ*: {recommendation['title']}\n"
                f"*–ñ–∞–Ω—Ä*: {recommendation['genre']}\n"
                f"*–û–ø–∏—Å–∞–Ω–∏–µ*: {recommendation['description']}\n"
                f"*–†–µ–π—Ç–∏–Ω–≥*: {recommendation['rating']}/10"
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å—Ç–µ—Ä, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            if recommendation.get('poster'):
                try:
                    await bot.send_photo(
                        message.chat.id,
                        recommendation['poster'],
                        caption=message_text,
                        parse_mode="Markdown"
                    )
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await message.answer(message_text, parse_mode="Markdown")
            else:
                await message.answer(message_text, parse_mode="Markdown")
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–Ω–∏–≥–∏
            message_text = (
                f"üìö *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∫–Ω–∏–≥–∏*\n\n"
                f"*–ù–∞–∑–≤–∞–Ω–∏–µ*: {recommendation['title']}\n"
                f"*–ê–≤—Ç–æ—Ä*: {recommendation['author']}\n"
                f"*–ñ–∞–Ω—Ä*: {recommendation['genre']}\n"
                f"*–û–ø–∏—Å–∞–Ω–∏–µ*: {recommendation['description']}\n"
                f"*–†–µ–π—Ç–∏–Ω–≥*: {recommendation['rating']}/10"
            )
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–ª–æ–∂–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            if recommendation.get('thumbnail'):
                try:
                    await bot.send_photo(
                        message.chat.id,
                        recommendation['thumbnail'],
                        caption=message_text,
                        parse_mode="Markdown"
                    )
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    await message.answer(message_text, parse_mode="Markdown")
            else:
                await message.answer(message_text, parse_mode="Markdown")
    else:
        await message.answer(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ {content_type if content_type else '—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é'} –≤ –∂–∞–Ω—Ä–µ '{genre}'. "
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä –∏–ª–∏ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞."
        )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message()
async def unknown_command(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Å–∫–∞–∑–∫—É –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö.
    """
    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "/recommend - –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é\n"
        "/genre - –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä\n"
        "/help - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
    )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ asyncio
    asyncio.run(main())